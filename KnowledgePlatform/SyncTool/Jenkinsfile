pipeline {
    agent any

    parameters {
        string(name: 'github_release_tag', description: 'GitHub release tag', defaultValue: 'release-4.5.0_RC12')
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm: [
                    $class: 'GitSCM',
                    userRemoteConfigs: [[url: 'https://github.com/project-sunbird/sunbird-learning-platform.git']],
                    branches: [[name: "refs/tags/${params.github_release_tag}"]]
                ], poll: false

                script {
                    commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    artifact_version = "${params.github_release_tag}_${commit_hash}_${env.BUILD_NUMBER}"
                    echo "artifact_version: ${artifact_version}"
                }
            }
        }

        stage('Pre-Build') {
            steps {
                sh 'rm -rf /data/logs/*'
                sh 'rm -rf /data/graphDB/*'
                sh 'rm -rf /data/testgraphDB/*'
                sh 'rm -rf /data/testGraphDB/*'
            }
        }

        stage('Build') {
            steps {
                script {
                    docker.image('maven:3.8.2-openjdk-8').inside {
                        sh 'mvn clean install -DskipTests'
                    }
                }
            }
        }

        stage('Archive artifacts') {
            steps {
                script {
                    sh """
                        mkdir lp_synctool_artifacts
                        cp platform-tools/spikes/sync-tool/target/sync-tool*.jar lp_synctool_artifacts
                        zip -j lp_synctool_artifacts.zip:${artifact_version} lp_synctool_artifacts/*
                    """
                    archiveArtifacts artifacts: "lp_synctool_artifacts.zip:${artifact_version}", fingerprint: true, onlyIfSuccessful: true
                    sh """echo {"artifact_name" : "lp_synctool_artifacts.zip", "artifact_version" : "${artifact_version}", "node_name" : "${env.NODE_NAME}"} > metadata.json"""
                    archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                    currentBuild.result = "SUCCESS"
                    currentBuild.description = "Artifact: ${artifact_version}, Public: ${params.github_release_tag}"
                }
            }
        }
    }

    post {
        failure {
            script {
                currentBuild.result = "FAILURE"
            }
        }
    }
}