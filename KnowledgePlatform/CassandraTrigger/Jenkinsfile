pipeline {
    agent any

    parameters {
        string(name: 'github_release_tag', defaultValue: 'release-3.8.0_RC18', description: 'Specify the GitHub release tag to build from.')
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm: [
                    $class: 'GitSCM',
                    userRemoteConfigs: [[url: 'https://github.com/Sunbird-Knowlg/sunbird-learning-platform.git']],
                    branches: [[name: 'refs/tags/release-3.8.0_RC18']]
                ], poll: false

                script {
                    def commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    artifact_version = sh(script: "echo ${params.github_release_tag.split('/')[-1]}_${commit_hash}_${env.BUILD_NUMBER}", returnStdout: true).trim()
                    echo "artifact_version: ${artifact_version}"
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    docker.image('maven:3.8.2-openjdk-8').inside {
                        sh 'mvn clean install -DskipTests=true'
                    }
                }
            }
        }
        stage('Archive artifacts') {
            steps {
                script {
                    sh """
                        mkdir lp_cassandratrigger_artifacts
                        cp platform-tools/cassandra-extension/transaction-event-handler/target/cassandra.transaction-event-handler*.jar lp_cassandratrigger_artifacts
                        zip -j lp_cassandratrigger_artifacts.zip:${artifact_version} lp_cassandratrigger_artifacts/*
                    """
                    archiveArtifacts artifacts: "lp_cassandratrigger_artifacts.zip:${artifact_version}", fingerprint: true, onlyIfSuccessful: true
                    sh """echo {\\"artifact_name\\" : \\"lp_cassandratrigger_artifacts.zip\\", \\"artifact_version\\" : \\"${artifact_version}\\", \\"node_name\\" : \\"${env.NODE_NAME}\\"} > metadata.json"""
                    archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                }
            }
        }
    }
    post {
        success {
            script {
                currentBuild.result = "SUCCESS"
                currentBuild.description = "Artifact: ${artifact_version}, Public: ${params.github_release_tag}"
            }
        }
        failure {
            script {
                currentBuild.result = "FAILURE"
            }
        }
    }

        
    }
