pipeline {
    agent any

    parameters {
        string(name: 'github_release_tag', defaultValue: 'release-5.0.0_RC2', description: 'GitHub release tag')
    }
    
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                script {
                    if (params.github_release_tag == "") {
                        checkout scm: [
                            $class: 'GitSCM',
                            userRemoteConfigs: [[url: 'https://github.com/Sunbird-Ed/sunbird-data-products.git']],
                            branches: [[name: 'refs/tags/release-5.0.0_RC2']]
                        ], poll: false
                        def commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def branch_name = sh(script: 'git name-rev --name-only HEAD | rev | cut -d "/" -f1| rev', returnStdout: true).trim()
                        artifact_version = "${branch_name}_${commit_hash}"
                        echo "github_release_tag not specified, using the latest commit hash: ${commit_hash}"
                    } else {
                        def scmVars = checkout scm: [
                            $class: 'GitSCM',
                            userRemoteConfigs: [[url: 'https://github.com/Sunbird-Ed/sunbird-data-products.git']],
                            branches: [[name: 'refs/tags/release-5.0.0_RC2']]
                        ], poll: false
                        checkout scm: [
                            $class: 'GitSCM',
                            userRemoteConfigs: [[url: 'https://github.com/Sunbird-Ed/sunbird-data-products.git']],
                            branches: [[name: 'refs/tags/release-5.0.0_RC2']]
                        ], poll: false
                        artifact_version = params.github_release_tag
                        echo "github_release_tag specified, building from github_release_tag: ${params.github_release_tag}"
                    }
                    echo "artifact_version: ${artifact_version}"
                }
            }
        }
        // stage('Pre-Build') {
        //     steps {
        //         sh '''
        //             #sed -i "s/'replication_factor': '2'/'replication_factor': '1'/g" scripts/database/data.cql
        //             '''
        //     }
        // }
        stage('Build') {
            steps {
                sh 'cd data-products && mvn clean install -DskipTests'
            }
        }
        stage('Archive artifacts') {
                    steps {
                        script {
                            dir('data-products') {
                                sh "mkdir -p lpa_dp_artifacts && cp ./target/data-products-1.0-distribution.tar.gz lpa_dp_artifacts"
                                sh "zip -j lpa_dp_artifacts.zip lpa_dp_artifacts/*"
                            }
                            archiveArtifacts artifacts: 'data-products/lpa_dp_artifacts.zip', fingerprint: true, onlyIfSuccessful: true
                            sh 'echo "{\"artifact_name\" : \"lpa_dp_artifacts.zip\", \"artifact_version\" : \"${artifact_version}\", \"node_name\" : \"${NODE_NAME}\"}" > metadata.json'
                            archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                        }
                    }
                }
    }
    
    post {
        success {
            script {
                currentBuild.description = artifact_version
            }
        }
        failure {
            script {
                currentBuild.result = 'FAILURE'
            }
        }
    }
}