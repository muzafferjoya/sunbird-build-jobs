pipeline {
    agent any
    
    parameters {
        string(name: 'github_release_tag', defaultValue: 'release-5.0.0_RC2', description: 'Specify the GitHub release tag to build from.')
    }
    
    environment {
        hub_org = "muzafferjoya/groups"
        registryCredential = 'muzaffar-docker-hub'
        dockerImage = ''
        releaseTag = "release-5.0.0_RC2"
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    cleanWs()
                    checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/Sunbird-Lern/groups-service.git']], branches: [[name: 'refs/tags/release-5.0.0_RC2']]], poll: false
                    commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    build_tag = sh(script: "echo ${params.github_release_tag.split('/')[-1]}_${commit_hash}_${env.BUILD_NUMBER}", returnStdout: true).trim()
                    echo "build_tag: ${build_tag}"
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    def mavenHome = tool 'maven'
                    env.PATH = "${mavenHome}/bin:${env.PATH}"
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    env.NODE_ENV = "build"
                    echo "Environment will be : ${env.NODE_ENV}"
                    sh 'git log -1'
                    sh 'mvn clean install -U -DskipTests=true'
                }
            }
        }
        stage('Package') {
            steps {
                script {
                    dir('service') {
                        sh 'mvn play2:dist'
                        sh 'cp target/group-service-1.0.0-dist.zip ../'
                    }
                    dockerImage = docker.build("${hub_org}:${releaseTag}")
                }
            }
        }
        stage('Push Image'){
            steps{
                script{
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push("$releaseTag")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        
    }
    
}
