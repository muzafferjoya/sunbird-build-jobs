pipeline {
    agent any

    environment {
        ANSI_GREEN = "\u001B[32m"
        ANSI_NORMAL = "\u001B[0m"
        ANSI_BOLD = "\u001B[1m"
        ANSI_RED = "\u001B[31m"
        ANSI_YELLOW = "\u001B[33m"
        NODE_ENV = 'build'

        hub_org = "muzafferjoya/cert-service"
        registryCredential = 'muzaffar-docker-hub'
        dockerImage = ''
        
        
    }
    
    parameters {
        string(defaultValue: 'release-5.0.0_RC2', description: 'GitHub release tag or branch', name: 'github_release_tag')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    if (!env.hub_org) {
                        echo "${ANSI_BOLD}${ANSI_RED}Uh Oh! Please set a Jenkins environment variable named hub_org with value as muzafferjoya/cert-service${ANSI_NORMAL}"
                        error 'Please resolve the errors and rerun..'
                    } else {
                        echo "${ANSI_BOLD}${ANSI_GREEN}Found environment variable named hub_org with value as: ${env.hub_org}${ANSI_NORMAL}"
                    }
                }
            }
        }
        // stage('Initialize') {
        //     steps {
        //         script {
        //             def mavenHome = tool 'maven'
        //             env.PATH = "${mavenHome}/bin:${env.PATH}"
        //         }
        //     }
        // }
        stage('Build') {
            steps {
             
                script {
                    cleanWs()
                    if (params.github_release_tag == "") {
                            checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/cert-service.git']], branches: [[name: 'refs/tags/release-5.0.0_RC2']]], poll: false
                            def commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            def branch_name = sh(script: 'git name-rev --name-only HEAD | rev | cut -d "/" -f1| rev', returnStdout: true).trim()
                            build_tag = "${branch_name}_${commit_hash}"
                            println("${ANSI_BOLD}${ANSI_YELLOW}github_release_tag not specified, using the latest commit hash: ${commit_hash}${ANSI_NORMAL}")
                        } else {
                            def scmVars = checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/cert-service.git']], branches: [[name: 'refs/tags/release-5.0.0_RC2']]], poll: false
                            checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/cert-service.git']], branches: [[name: 'refs/tags/release-5.0.0_RC2']]], poll: false
                            build_tag = params.github_release_tag
                            println("${ANSI_BOLD}${ANSI_YELLOW}github_release_tag specified, building from tag: ${params.github_release_tag}${ANSI_NORMAL}")
                        }
                        echo "build_tag: ${build_tag}"
                        currentDir = sh(returnStdout: true, script: 'pwd').trim()
                        env.NODE_ENV = "build"
                        println("Environment will be : ${env.NODE_ENV}")
                        sh 'git log -1'
                        sh "cd ${currentDir}"
                        //sh 'java -version'
                        //sh 'mvn clean install'
                       

                }
          
            }
        }
        stage('Installing Maven Dep') {
            steps {
                script {
                    docker.image('maven:3.8.2-openjdk-11').inside {
                        sh 'mvn clean install'
                    }
                }
            }
        }
        stage('Installing Maven Dep-1') {
            steps {
                script {
                     dir('service'){
                        //  docker.image('maven:3.8.2-openjdk-11').inside {
                          sh 'mvn play2:dist'
                    //}
                }
                    
                }
            }
        }
        // stage('Package') {
        //     steps {
        //         script {
        //             dir('service') {
        //                 sh 'mvn play2:dist'
        //                 sh 'cp target/cert-service-1.2.0-dist.zip ../'
        //             }
        //             sh('chmod 777 ./build.sh')
        //             sh("./build.sh ${build_tag} ${env.NODE_NAME} ${hub_org}")
        //         }
        //     }
        // }
        
    }
}
