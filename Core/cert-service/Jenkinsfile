pipeline {
    agent any

    environment {
        NODE_ENV = 'build'

        hub_org = "muzafferjoya/cert-service"
        registryCredential = 'muzaffar-docker-hub'
        dockerImage = ''
        
    }
    
    parameters {
        string(defaultValue: 'refs/tags/release-5.0.0_RC2', description: 'GitHub release tag or branch', name: 'github_release_tag')
    }

    stages {
        
        stage('Initialize') {
            steps {
                script {
                    def mavenHome = tool 'maven'
                    env.PATH = "${mavenHome}/bin:${env.PATH}"
                }
            }
        }
        stage('Build') {
            steps {
             
                script {
                    if (params.github_release_tag == "") {
                            checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/cert-service.git']], branches: [[name: 'refs/tags/release-5.0.0_RC2']]], poll: false
                            def commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            def branch_name = sh(script: 'git name-rev --name-only HEAD | rev | cut -d "/" -f1| rev', returnStdout: true).trim()
                            build_tag = "${branch_name}_${commit_hash}"
                            println("github_release_tag not specified, using the latest commit hash: ${commit_hash}")
                        } else {
                            def scmVars = checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/cert-service.git']], branches: [[name: 'refs/tags/release-5.0.0_RC2']]], poll: false
                            checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/cert-service.git']], branches: [[name: 'refs/tags/release-5.0.0_RC2']]], poll: false
                            build_tag = params.github_release_tag
                            println("github_release_tag specified, building from tag: ${params.github_release_tag}")
                        }
                        echo "build_tag: ${build_tag}"
                        currentDir = sh(returnStdout: true, script: 'pwd').trim()
                        env.NODE_ENV = "build"
                        println("Environment will be : ${env.NODE_ENV}")
                        sh 'git log -1'
                        sh "cd ${currentDir}"
                        sh 'mvn clean install'

                }
          
        }
        }
    }
    
}
