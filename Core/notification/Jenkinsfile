pipeline {
    agent any
    
    environment {
        hub_org = "muzafferjoya/notification-service"
        registryCredential = 'muzaffar-docker-hub'
        dockerImage = ''
        releaseTag = "release-5.0.0_RC2"
    }

    parameters {
        string(name: 'github_release_tag', defaultValue: 'release-5.0.0_RC2', description: 'Specify the GitHub release tag to build from.')
    }
    
    stages {
        
        stage('Clean Workspace and Checkout') {
            steps {
                cleanWs()
                checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/Sunbird-Lern/notification-service.git']], branches: [[name: 'refs/tags/release-5.0.0_RC2']]], poll: false
                script {
                    def commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def build_tag = sh(script: "echo ${params.github_release_tag.split('/')[-1]}_${commit_hash}_${env.BUILD_NUMBER}", returnStdout: true).trim()
                    echo "build_tag: ${build_tag}"
                }
            }
        }

        stage('Initialize') {
            steps {
                script {
                    def mavenHome = tool 'maven'
                    env.PATH = "${mavenHome}/bin:${env.PATH}"
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    def currentDir = sh(returnStdout: true, script: 'pwd').trim()
                    env.NODE_ENV = "build"
                    echo "Environment will be: ${env.NODE_ENV}"
                    sh 'git log -1'
                    sh "cd ${currentDir}"
                    // docker.image('maven:3.8.2-openjdk-8').inside {
                        sh 'mvn clean install'
                    //}
                    
                }
            }
        }
        
        stage('Package') {
            steps {
                dir('service') {
                    sh 'mvn play2:dist'
                    sh 'cp target/notification-service-1.0.0-dist.zip ../'
                }
                script {
                    dockerImage = docker.build("${hub_org}:${releaseTag}")
                }                
            }
        }
        stage('Push Image'){
            steps{
                sh 'docker push ${hub_org}:${releaseTag}'
            }
        }
    }
}
