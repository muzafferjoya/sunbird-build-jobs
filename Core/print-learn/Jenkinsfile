pipeline {
    agent any

    parameters {
        string(name: 'github_release_tag', defaultValue: 'release-3.8.0_RC1', description: 'Specify the GitHub release tag to build from.')
    }

    environment {
        hub_org = "muzafferjoya/print-service"
        registryCredential = 'muzaffar-docker-hub'
        dockerImage = ''
        releaseTag = "release-3.8.0_RC1"
        NODE_ENV = "build"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    if (params.github_release_tag == "") {
                        checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/print-service.git']], branches: [[name: 'refs/tags/release-3.8.0_RC1']]], poll: false
                        def commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def branch_name = sh(script: 'git name-rev --name-only HEAD | rev | cut -d "/" -f1| rev', returnStdout: true).trim()
                        build_tag = "${branch_name}_${commit_hash}"
                        echo "github_release_tag not specified, using the latest commit hash: ${commit_hash}"
                    } else {
                        def scmVars = checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/print-service.git']], branches: [[name: 'refs/tags/release-3.8.0_RC1']]], poll: false
                        checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/project-sunbird/print-service.git']], branches: [[name: 'refs/tags/release-3.8.0_RC1']]], poll: false
                        build_tag = params.github_release_tag
                        echo "github_release_tag specified, building from github_release_tag: ${params.github_release_tag}"
                    }
                    echo "build_tag: ${build_tag}"
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "Environment will be : ${env.NODE_ENV}"
                    dockerImage = docker.build("${hub_org}:${releaseTag}")
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push("$releaseTag")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
}
