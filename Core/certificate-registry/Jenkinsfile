pipeline {
    agent any

    environment {
        ANSI_GREEN = "\u001B[32m"
        ANSI_NORMAL = "\u001B[0m"
        ANSI_BOLD = "\u001B[1m"
        ANSI_RED = "\u001B[31m"
        ANSI_YELLOW = "\u001B[33m"
        NODE_ENV = 'build'

        hub_org = "muzafferjoya/certificate-registry"
        registryCredential = 'muzaffar-docker-hub'
        dockerImage = ''
    }
    
    parameters {
        string(defaultValue: 'refs/tags/release-5.0.0_RC1', description: 'GitHub release tag or branch', name: 'github_release_tag')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    if (!env.hub_org) {
                        echo "${ANSI_BOLD}${ANSI_RED}Uh Oh! Please set a Jenkins environment variable named hub_org with value as muzafferjoya/certificate-registry${ANSI_NORMAL}"
                        error 'Please resolve the errors and rerun..'
                    } else {
                        echo "${ANSI_BOLD}${ANSI_GREEN}Found environment variable named hub_org with value as: ${env.hub_org}${ANSI_NORMAL}"
                    }
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    def mavenHome = tool 'maven'
                    env.PATH = "${mavenHome}/bin:${env.PATH}"
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/Sunbird-Lern/certificate-registry.git']], branches: [[name: 'refs/tags/release-5.0.0_RC1']]], poll: false
                    commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    build_tag = sh(script: "echo ${params.github_release_tag.split('/')[-1]}_${commit_hash}_${env.BUILD_NUMBER}", returnStdout: true).trim()
                    echo "build_tag: ${build_tag}"
                    echo "Environment will be : ${env.NODE_ENV}"
                    sh 'git log -1'
                    sh 'mvn clean install'
                }
            }
        }
        // stage('Package') {
        //     steps {
        //         script {
        //             dir('service') {
        //                 sh 'mvn play2:dist'
        //                 sh 'cp target/service-1.0.0-SNAPSHOT-dist.zip ../'
        //             }
        //             sh('chmod 777 ./build.sh')
        //             sh("./build.sh ${build_tag} ${env.NODE_NAME} ${env.hub_org}")
        //         }
        //     }
        // }
        // stage('ArchiveArtifacts') {
        //     steps {
        //         archiveArtifacts "metadata.json"
        //         currentBuild.description = "${build_tag}"
        //     }
        // }
    }
    // post {
    //     failure {
    //         currentBuild.result = "FAILURE"
    //     }
    // }
}
