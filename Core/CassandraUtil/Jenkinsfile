pipeline {
    agent any
    
    parameters {
        string(defaultValue: 'refs/tags/release-4.10.0_RC1', description: 'GitHub release tag or branch', name: 'github_release_tag')
    }
    
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                script {
                    checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/Sunbird-Lern/sunbird-utils.git']], branches: [[name: params.github_release_tag]]], poll: false
                    commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    artifact_version = sh(script: "echo ${params.github_release_tag.split('/')[-1]}_${commit_hash}_${env.BUILD_NUMBER}", returnStdout: true).trim()
                    echo "artifact_version: ${artifact_version}"
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    def mavenHome = tool 'maven'
                    env.PATH = "${mavenHome}/bin:${env.PATH}"
                }
            }
        }
        
        stage('Build') {
            steps {
                sh """
                cd sunbird-cassandra-migration/cassandra-migration
                mvn clean install -DskipTests
                """
            }
        }
        
        stage('Archive artifacts') {
            steps {
                script {
                    sh """
                    mkdir cassandra_artifacts
                    cp sunbird-cassandra-migration/cassandra-migration/target/cassandra-migration-*-jar-with-dependencies.jar cassandra_artifacts
                    zip -j cassandra_artifacts.zip cassandra_artifacts/*
                    """
                    archiveArtifacts artifacts: "cassandra_artifacts.zip", fingerprint: true, onlyIfSuccessful: true
                    sh 'echo "{\"artifact_name\": \"cassandra_artifacts.zip\", \"artifact_version\": \"" + artifact_version + "\", \"node_name\": \"" + env.NODE_NAME + "\"}" > metadata.json'
                    archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                    currentBuild.description = "${artifact_version}"
                }
            }
}



    }
}
