pipeline {
    agent any

    parameters {
        string(name: 'github_release_tag', defaultValue: 'release-5.2.1_RC2', description: 'Specify the GitHub release tag to build from.')
    }
    
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                script {
                    if (params.github_release_tag == "") {
                        checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/Sunbird-Knowlg/sunbird-generic-editor.git']], branches: [[name: 'refs/tags/release-5.2.1_RC2']]], poll: false
                        commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        branch_name = sh(script: 'git name-rev --name-only HEAD | rev | cut -d "/" -f1| rev', returnStdout: true).trim()
                        artifact_version = branch_name + "_" + commit_hash
                        println("github_release_tag not specified, using the latest commit hash: " + commit_hash)
                        sh "git clone https://github.com/project-sunbird/sunbird-content-plugins.git plugins"
                        sh "cd plugins && git checkout origin/${branch_name} -b ${branch_name}"
                    } else {
                        def scmVars = checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/Sunbird-Knowlg/sunbird-generic-editor.git']], branches: [[name: 'refs/tags/release-5.2.1_RC2']]], poll: false
                        checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/Sunbird-Knowlg/sunbird-generic-editor.git']], branches: [[name: 'refs/tags/release-5.2.1_RC2']]], poll: false
                        commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        artifact_version = params.github_release_tag + "_" + commit_hash
                        branch_name = params.github_release_tag.split('_')[0].split('\\.')[0] + "." + params.github_release_tag.split('_')[0].split('\\.')[1]
                        println("github_release_tag specified, building from github_release_tag: " + params.github_release_tag)
                        sh "git clone https://github.com/project-sunbird/sunbird-content-plugins.git plugins"
                        sh """
                            cd plugins
                            checkout_tag=\$(git ls-remote --tags origin $branch_name* | grep -o "$branch_name.*" | sort -V | tail -n1)
                            git checkout tags/\${checkout_tag} -b \${checkout_tag}
                        """
                    }
                    echo "artifact_version: " + artifact_version
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    def run_testcase = false
                    sh """#!/bin/bash
                STARTTIME=\$(date +%s)
                NODE_VERSION=10.24.1
                branch_name=${branch_name}
                commit_hash=${commit_hash}
                runTest=${run_testcase}
                echo "runTest: \$runTest"
                echo "Starting editor build from build.sh"
                set -eu
                export NVM_DIR="\$HOME/.nvm"
                [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"
                [ -s "\$NVM_DIR/bash_completion" ] && . "\$NVM_DIR/bash_completion"
                nvm install \$NODE_VERSION
                nvm use \$NODE_VERSION
                export version_number=\$branch_name
                export build_number=\$commit_hash
                rm -rf generic-editor
                sudo apt-get install -y build-essential libpng-dev
                node -v
                npm -v 
                npm install
                npm install -g bower
                npm install -g gulp 
                cd app
                bower cache clean
                bower install --force
                cd ..
                gulp packageCorePlugins
                npm run plugin-build
                npm run build
                if [ "\$runTest" == "true" ]; then
                    npm run test
                fi
            """
                }
            }
        }
        stage('ArchiveArtifacts') {
            steps {
                script {
                    sh """
                        mkdir generic-editor-artifacts
                        cp generic-editor.zip generic-editor-artifacts
                        zip -j  generic-editor-artifacts.zip:${artifact_version}  generic-editor-artifacts/*                      
                    """
                    archiveArtifacts "generic-editor-artifacts.zip:${artifact_version}"
                    sh """echo {\\"artifact_name\\" : \\"generic-editor-artifacts.zip\\", \\"artifact_version\\" : \\"${artifact_version}\\", \\"node_name\\" : \\"${env.NODE_NAME}\\"} > metadata.json"""
                    archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                    currentBuild.description = "${artifact_version}"
                }
            }
        }
    }
}