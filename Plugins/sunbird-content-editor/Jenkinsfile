pipeline {
    agent any
    parameters {
        string(name: 'github_release_tag', defaultValue: 'release-5.2.1_RC3', description: 'Specify the GitHub release tag to build from.')
    }
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm: [
                    $class: 'GitSCM',
                    userRemoteConfigs: [[url: 'https://github.com/Sunbird-Knowlg/sunbird-content-editor.git']],
                    branches: [[name: 'refs/tags/release-5.2.1_RC3']],
                    poll: false
                ]
                script {
                    commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    branch_name = params.github_release_tag.split('/')[-1]
                    artifact_version = "${branch_name}_${commit_hash}"
                    sh "git clone https://github.com/project-sunbird/sunbird-content-plugins.git plugins -b ${branch_name}"
                    echo "artifact_version: ${artifact_version}"
                }
            }
        }
        stage('Build') {
            steps {
                sh 'chmod 777 build.sh'
                sh "./build.sh ${artifact_version} ${commit_hash}"
            }
        }
        stage('ArchiveArtifacts') {
            steps {
                sh """
                    mkdir content-editor-artifacts
                    cp content-editor.zip content-editor-artifacts
                    zip -j content-editor-artifacts.zip:${artifact_version} content-editor-artifacts/*
                """
                archiveArtifacts "content-editor-artifacts.zip:${artifact_version}"
                sh """echo {"artifact_name" : "content-editor-artifacts.zip", "artifact_version" : "${artifact_version}", "node_name" : "${env.NODE_NAME}"} > metadata.json"""
                archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
            }
        }
    }
    post {
        always {
            script {
                currentBuild.description = "${artifact_version}"
            }
        }
        failure {
            script {
                currentBuild.result = "FAILURE"
            }
        }
    }
}